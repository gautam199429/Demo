package hhshss;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

public class Basesha {
	
	public static void main(String[] args) throws NoSuchAlgorithmException {
		
//		String original = "";
//		String encodeString  = Base64.getEncoder().encodeToString(original.getBytes());
//		System.out.println(encodeString);
		byte[] decodedString = Base64.getDecoder().decode("ew0KICAiZ3N0aW4iOiAiMjVBQkNERTEwMjhGNlo0IiwNCiAgImZwIjogIjA2MjAxNiIsDQogICJndCI6IDM3ODI5NjkuMDEsDQogICJiMmIiOiBbDQogICAgew0KICAgICAgImN0aW4iOiAiMjFBQkNERTMxODBGOFo2IiwNCiAgICAgICJpbnYiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiZmxhZyI6ICJEIiwNCiAgICAgICAgICAiY2hrc3VtIjogIkFmbEp1ZlBsRlN0cUtCWiIsDQogICAgICAgICAgImludW0iOiAiOTg2NzgiLA0KICAgICAgICAgICJpZHQiOiAiMjUtMTAtMjAxNiIsDQogICAgICAgICAgInZhbCI6IDc3NjUyMi4wMiwNCiAgICAgICAgICAicG9zIjogIjAxIiwNCiAgICAgICAgICAicmNocmciOiAiTiIsDQogICAgICAgICAgInByb19hc3MiOiAiWSIsDQogICAgICAgICAgIml0bXMiOiBbDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICJudW0iOiAxLA0KICAgICAgICAgICAgICAic3RhdHVzIjogIkEiLA0KICAgICAgICAgICAgICAidHkiOiAiUyIsDQogICAgICAgICAgICAgICJoc25fc2MiOiAiUzE5OTEiLA0KICAgICAgICAgICAgICAidHh2YWwiOiA2MjEwLjk5LA0KICAgICAgICAgICAgICAiaXJ0IjogMCwNCiAgICAgICAgICAgICAgImlhbXQiOiAwLA0KICAgICAgICAgICAgICAiY3J0IjogMzcuNCwNCiAgICAgICAgICAgICAgImNhbXQiOiA4ODc0NjE0LjQ0LA0KICAgICAgICAgICAgICAic3J0IjogMzMuNDEsDQogICAgICAgICAgICAgICJzYW10IjogNS42OA0KICAgICAgICAgICAgfQ0KICAgICAgICAgIF0NCiAgICAgICAgfQ0KICAgICAgXQ0KICAgIH0NCiAgXSwNCiAgImIyYmEiOiBbDQogICAgew0KICAgICAgImN0aW4iOiAiNzZBQkNERTM1NDhGNFo4IiwNCiAgICAgICJpbnYiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiZmxhZyI6ICJEIiwNCiAgICAgICAgICAiY2hrc3VtIjogIkFmbEp1ZlBsRlN0cUtCWiIsDQogICAgICAgICAgImludW0iOiAiMjc2ODYiLA0KICAgICAgICAgICJpZHQiOiAiMTYtMDQtMjAxNiIsDQogICAgICAgICAgInZhbCI6IDE0MjI0NC43MSwNCiAgICAgICAgICAicG9zIjogIjAxIiwNCiAgICAgICAgICAicmNocmciOiAiTiIsDQogICAgICAgICAgIm9udW0iOiAiUzAwODQwMCIsDQogICAgICAgICAgIm9kdCI6ICIwMy0wMS0yMDE2IiwNCiAgICAgICAgICAicHJvX2FzcyI6ICJZIiwNCiAgICAgICAgICAiaXRtcyI6IFsNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIm51bSI6IDEsDQogICAgICAgICAgICAgICJzdGF0dXMiOiAiQSIsDQogICAgICAgICAgICAgICJ0eSI6ICJTIiwNCiAgICAgICAgICAgICAgImhzbl9zYyI6ICJTODk1NCIsDQogICAgICAgICAgICAgICJ0eHZhbCI6IDI0NzUuMjUsDQogICAgICAgICAgICAgICJpcnQiOiAwLA0KICAgICAgICAgICAgICAi"
				+ "aWFtdCI6IDAsDQogICAgICAgICAgICAgICJjcnQiOiA0Ny40OCwNCiAgICAgICAgICAgICAgImNhbXQiOiA5MzA4LjExLA0KICAgICAgICAgICAgICAic3J0IjogMjYuMDEsDQogICAgICAgICAgICAgICJzYW10IjogODI1MzIwNzEzLjEzDQogICAgICAgICAgICB9DQogICAgICAgICAgXQ0KICAgICAgICB9DQogICAgICBdDQogICAgfQ0KICBdLA0KICAiYjJjbCI6IFsNCiAgICB7DQogICAgICAic3RhdGVfY2QiOiAiMjMiLA0KICAgICAgImludiI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJmbGFnIjogIkQiLA0KICAgICAgICAgICJjaGtzdW0iOiAiQWZsSnVmUGxGU3RxS0JaIiwNCiAgICAgICAgICAiY25hbWUiOiAiQUJDRCIsDQogICAgICAgICAgImludW0iOiAiOTI2NjEiLA0KICAgICAgICAgICJpZHQiOiAiMTAtMDEtMjAxNiIsDQogICAgICAgICAgInZhbCI6IDc4NDU4Ni4zMywNCiAgICAgICAgICAicG9zIjogIjAxIiwNCiAgICAgICAgICAicHJvX2FzcyI6ICJOIiwNCiAgICAgICAgICAiaXRtcyI6IFsNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgIm51bSI6IDEsDQogICAgICAgICAgICAgICJ0eSI6ICJTIiwNCiAgICAgICAgICAgICAgImhzbl9zYyI6ICJTMjQ2OSIsDQogICAgICAgICAgICAgICJ0eHZhbCI6IDQ0NDUuMDUsDQogICAgICAgICAgICAgICJpcnQiOiAwLA0KICAgICAgICAgICAgICAiaWFtdCI6IDk3ODIxLjAzLA0KICAgICAgICAgICAgICAiY3J0IjogMCwNCiAgICAgICAgICAgICAgImNhbXQiOiAwLA0KICAgICAgICAgICAgICAic3J0IjogMCwNCiAgICAgICAgICAgICAgInNhbXQiOiAwDQogICAgICAgICAgICB9DQogICAgICAgICAgXQ0KICAgICAgICB9DQogICAgICBdDQogICAgfQ0KICBdLA0KICAiYjJjbGEiOiBbDQogICAgew0KICAgICAgInN0YXRlX2NkIjogIjciLA0KICAgICAgImludiI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJmbGFnIjogIkQiLA0KICAgICAgICAgICJjaGtzdW0iOiAiQWZsSnVmUGxGU3RxS0JaIiwNCiAgICAgICAgICAiY25hbWUiOiAiQUJDRCIsDQogICAgICAgICAgImludW0iOiAiNjMwODMiLA0KICAgICAgICAgICJpZHQiOiAiMjItMTEtMjAxNiIsDQogICAgICAgICAgInZhbCI6IDc5NDI1OC4yNCwNCiAgICAgICAgICAicG9zIjogIjAxIiwNCiAgICAgICAgICAicmNocmciOiAiTiIsDQogICAgICAgICAgInByb19hc3MiOiAiWSIsDQogICAgICAgICAgIm9udW0iOiAiMzEzMTEiLA0KICAgICAgICAgICJvZHQiOiAiMjQtMDEtMjAxNiIsDQogICAgICAgICAgIml0bXMiOiBbDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICJudW0iOiAxLA0KICAgICAgICAgICAgICAidHkiOiAiRyIsDQogICAgICAgICAgICAgICJoc25fc2MiOiAiSDkzNiIsDQogICAgICAgICAgICAgICJ0eHZhbCI6IDkzNjIuMTksDQogICAgICAgICAgICAgICJpcnQiOiA2Ny43LA0KICAgICAgICAgICAgICAiaWFtdCI6IDc3MTkuMzEsDQogICAgICAgICAgICAgICJjcnQiOiAwLA0KICAgICAgICAgICAgICAiY2FtdCI6IDAsDQogICAgICAgICAgICAgICJzcnQiOiAwLA0KICAgICAgICAgICAgICAic2FtdCI6IDANCiAgICAgICAgICAgIH0NCiAgICAgICAgICBdDQogICAgICAgIH0NCiAgICAgIF0NCiAgICB9DQogIF0sDQogICJiMmNzIjogWw0KICAgIHsNCiAgICAgICJmbGFnIjogIkQiLA0KICAgICAgImNoa3N1bSI6ICJBZmxKdWZQbEZTdHFL"
				+ "QloiLA0KICAgICAgInN0YXRlX2NkIjogIjciLA0KICAgICAgInR5IjogIkciLA0KICAgICAgImhzbl9zYyI6ICJTMTE3MyIsDQogICAgICAidHh2YWwiOiA5NTk1LjMzLA0KICAgICAgImlydCI6IDAsDQogICAgICAiaWFtdCI6IDAsDQogICAgICAiY3J0IjogMjIsDQogICAgICAiY2FtdCI6IDI4LjU0LA0KICAgICAgInNydCI6IDM5LjI2LA0KICAgICAgInNhbXQiOiA5Nzg5MjIxOTguNjEsDQogICAgICAicHJvX2FzcyI6ICJZIg0KICAgIH0NCiAgXSwNCiAgImIyY3NhIjogWw0KICAgIHsNCiAgICAgICJmbGFnIjogIkQiLA0KICAgICAgImNoa3N1bSI6ICJBZmxKdWZQbEZTdHFLQloiLA0KICAgICAgIm9zdXBzdF9jZCI6ICIyNSIsDQogICAgICAib21vbiI6ICIwNzIwMTYiLA0KICAgICAgIm90eSI6ICJTIiwNCiAgICAgICJvaHNuX3NjIjogIkg2MDUiLA0KICAgICAgInN0YXRlX2NkIjogIjEyIiwNCiAgICAgICJ0eSI6ICJTIiwNCiAgICAgICJoc25fc2MiOiAiSDQ5NiIsDQogICAgICAidHh2YWwiOiAzNTIyLjA5LA0KICAgICAgImlydCI6IDAsDQogICAgICAiaWFtdCI6IDAsDQogICAgICAiY3J0IjogNDIuMTEsDQogICAgICAiY2FtdCI6IDg3Mzc1OS42LA0KICAgICAgInNydCI6IDkxLjQzLA0KICAgICAgInNhbXQiOiA5LjAzLA0KICAgICAgInByb19hc3MiOiAiWSINCiAgICB9DQogIF0sDQogICJuaWwiOiB7DQogICAgIm5pbF9zdXBwbGllcyI6IFsNCiAgICAgIHsNCiAgICAgICAgInNwbHlfdHkiOiAiSUVSQiIsDQogICAgICAgICJuaWxfZGF0YSI6IFsNCiAgICAgICAgICB7DQogICAgICAgICAgICAibmlsX2FtdCI6IDY1NTg3NDg1LjczLA0KICAgICAgICAgICAgImV4cHRfYW10IjogODExNTE3LjU4LA0KICAgICAgICAgICAgIm5nc3VwX2FtdCI6IDk5Mi45MywNCiAgICAgICAgICAgICJpdG1fdHkiOiAiRyINCiAgICAgICAgICB9DQogICAgICAgIF0NCiAgICAgIH0NCiAgICBdLA0KICAgICJmbGFnIjogIkQiLA0KICAgICJjaGtzdW0iOiAiQWZsSnVmUGxGU3RxS0JaIg0KICB9LA0KICAiZXhwIjogWw0KICAgIHsNCiAgICAgICJleF90cCI6ICJXUEFZIiwNCiAgICAgICJpbnYiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAiaW51bSI6ICI4MTU0MiIsDQogICAgICAgICAgImlkdCI6ICIxMi0wMi0yMDE2IiwNCiAgICAgICAgICAidmFsIjogOTk1MDQ4LjM2LA0KICAgICAgICAgICJzYm51bSI6IDg0Mjk4LA0KICAgICAgICAgICJzYmR0IjogIjA0LTEwLTIwMTYiLA0KICAgICAgICAgICJpdG1zIjogWw0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAidHkiOiAiRyIsDQogICAgICAgICAgICAgICJoc25fc2MiOiAiUzkyMDciLA0KICAgICAgICAgICAgICAidHh2YWwiOiA5MTU4LjI5LA0KICAgICAgICAgICAgICAiaXJ0IjogMCwNCiAgICAgICAgICAgICAgImlhbXQiOiAwLA0KICAgICAgICAgICAgICAiY3J0IjogMjUuNjQsDQogICAgICAgICAgICAgICJjYW10IjogNC41MSwNCiAgICAgICAgICAgICAgInNydCI6IDc1Ljk5LA0KICAgICAgICAgICAgICAic2FtdCI6IDU0LjMzDQogICAgICAgICAgICB9DQogICAgICAgICAgXQ0KICAgICAgICB9DQogICAgICBdDQogICAgfQ0KICBdLA0KICAiZXhwYSI6IFsNCiAgICB7DQogICAgICAiZXhfdHAiOiAiV09QQVkiLA"
				+ "0KICAgICAgImludiI6IFsNCiAgICAgICAgew0KICAgICAgICAgICJpbnVtIjogIjIzMTcxIiwNCiAgICAgICAgICAiaWR0IjogIjE5LTEwLTIwMTYiLA0KICAgICAgICAgICJ2YWwiOiA5OTUwNDguMzYsDQogICAgICAgICAgInNibnVtIjogODQyOTgsDQogICAgICAgICAgInNiZHQiOiAiMDQtMTAtMjAxNiIsDQogICAgICAgICAgIm9udW0iOiAiODkzNjIiLA0KICAgICAgICAgICJvZHQiOiAiMDItMDItMjAxNiIsDQogICAgICAgICAgIml0bXMiOiBbDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICJ0eSI6ICJTIiwNCiAgICAgICAgICAgICAgImhzbl9zYyI6ICJTNzg5MCIsDQogICAgICAgICAgICAgICJ0eHZhbCI6IDgxODAuMzUsDQogICAgICAgICAgICAgICJpcnQiOiAwLA0KICAgICAgICAgICAgICAiaWFtdCI6IDAsDQogICAgICAgICAgICAgICJjcnQiOiA3NC4yNywNCiAgICAgICAgICAgICAgImNhbXQiOiA5NjE1Nzk2Ljc2LA0KICAgICAgICAgICAgICAic3J0IjogMTIuMjksDQogICAgICAgICAgICAgICJzYW10IjogNTE0MTA0LjEyDQogICAgICAgICAgICB9DQogICAgICAgICAgXQ0KICAgICAgICB9DQogICAgICBdDQogICAgfQ0KICBdLA0KICAiaHNuU2FjIjogew0KICAgICJoc24iOiBbDQogICAgICB7DQogICAgICAgICJ0eSI6ICJTIiwNCiAgICAgICAgImhzbl9zYyI6ICJTODIyMyIsDQogICAgICAgICJ0eHZhbCI6IDc5My44NiwNCiAgICAgICAgImlydCI6IDAsDQogICAgICAgICJpYW10IjogMCwNCiAgICAgICAgImNydCI6IDYxLjE3LA0KICAgICAgICAiY2FtdCI6IDI3NjM0MjYxLjY0LA0KICAgICAgICAic3J0IjogNzYuMzUsDQogICAgICAgICJzYW10IjogMTI1MTQ4MDkuMzEsDQogICAgICAgICJkZXNjIjogIkdvbGQiLA0KICAgICAgICAidXFjIjogIktnIiwNCiAgICAgICAgInF0eSI6IDEwLA0KICAgICAgICAic3kiOiAiSW50ZXItU3RhdGUgQjJDIg0KICAgICAgfQ0KICAgIF0sDQogICAgImZsYWciOiAiRCIsDQogICAgImNoa3N1bSI6ICJBZmxKdWZQbEZTdHFLQloiDQogIH0sDQogICJjZG5hIjogWw0KICAgIHsNCiAgICAgICJjZ3N0aW4iOiAiMjBHUlJIRjI1NjJEM0EzIiwNCiAgICAgICJ0eXAiOiAiQjJCIiwNCiAgICAgICJjbmFtZSI6ICJLYW1hdGggRm9vZHMgUHZ0Lkx0ZC4iLA0KICAgICAgImNkbmEiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAibnR0eSI6ICJDUiIsDQogICAgICAgICAgIm50X251bSI6IDUzMzUxNSwNCiAgICAgICAgICAibnRfZHQiOiAiMjMtMDktMjAxNiIsDQogICAgICAgICAgIm9udF9udW0iOiAxMjM0NTY3ODksDQogICAgICAgICAgIm9udF9kdCI6ICIyMy0wOS0yMDE2IiwNCiAgICAgICAgICAicnNuIjogIk5wY25MRUN2dHJQR2xCdyIsDQogICAgICAgICAgImludW0iOiAiOTE1OTE0IiwNCiAgICAgICAgICAiaWR0IjogIjIzLTA5LTIwMTYiLA0KICAgICAgICAgICJ2YWwiOiA1MjI1LjI4LA0KICAgICAgICAgICJpcnQiOiA0OC43LA0KICAgICAgICAgICJpYW10IjogODQ1MDM4LjIyLA0KICAgICAgICAgICJjcnQiOiA5NS43OSwNCiAgICAgICAgICAiY2FtdCI6IDM3NjYxLjI5LA0KICAgICAgICAgICJzcnQiOiA2OC40NSwNCiAgICAgICAgICAic2FtdCI6IDQyMzgxLjEzDQogICAgICAgIH0NCiAgICAgIF0NCiAgICB9DQogIF0sDQogICJhdCI6IFsNCiAgICB7DQogICAgICAiY3RpbiI6ICI2N0FCQ0RFNzk2MEYxWjYiLA0KIC"
				+ "AgICAgImNuYW1lIjogIlJfdVBrRXNvR2lodnJ2ZnFLIiwNCiAgICAgICJzdXBzdF9jZCI6ICIxMiIsDQogICAgICAiZG9jX251bSI6ICJhaFlKa1ZHd3JQWkFsSXAiLA0KICAgICAgImRvY19kdCI6ICIyNi0xMC0yMDE2IiwNCiAgICAgICJhZGFtdCI6IDYyNzgyLjAyLA0KICAgICAgIml0bXMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAidHkiOiAiUyIsDQogICAgICAgICAgImhzbl9zYyI6ICJTOTA0MyIsDQogICAgICAgICAgImlydCI6IDAsDQogICAgICAgICAgImlhbXQiOiAwLA0KICAgICAgICAgICJjcnQiOiA3LjMyLA0KICAgICAgICAgICJjYW10IjogNzM5NjU3Ljk0LA0KICAgICAgICAgICJzcnQiOiA4LjQ5LA0KICAgICAgICAgICJzYW10IjogMTYyNS40OQ0KICAgICAgICB9DQogICAgICBdDQogICAgfQ0KICBdLA0KICAiYXRhIjogWw0KICAgIHsNCiAgICAgICJvY3RpbiI6ICI2N0FCQ0RFNzk2MEYxWjYiLA0KICAgICAgIm9jbmFtZSI6ICJSX3VQa0Vzb0dpaHZydmZxSyIsDQogICAgICAib2RvY19udW0iOiAiYWhZSmtWR3dyUFpBbElwIiwNCiAgICAgICJvZG9jX2R0IjogIjI2LTEwLTIwMTYiLA0KICAgICAgImN0aW4iOiAiNjdBQkNERTc5NjBGMVo2IiwNCiAgICAgICJjbmFtZSI6ICJSX3VQa0Vzb0dpaHZydmZxSyIsDQogICAgICAic3Vwc3RfY2QiOiAiMTIiLA0KICAgICAgImRvY19udW0iOiAiYWhZSmtWR3dyUFpBbElwIiwNCiAgICAgICJkb2NfZHQiOiAiMjYtMTAtMjAxNiIsDQogICAgICAiYWRhbXQiOiA3MjMyMi4xMSwNCiAgICAgICJpdG1zIjogWw0KICAgICAgICB7DQogICAgICAgICAgInR5IjogIlMiLA0KICAgICAgICAgICJoc25fc2MiOiAiUzkwNDMiLA0KICAgICAgICAgICJpcnQiOiAwLA0KICAgICAgICAgICJpYW10IjogMCwNCiAgICAgICAgICAiY3J0IjogNy4zMiwNCiAgICAgICAgICAiY2FtdCI6IDczOTY1Ny45NCwNCiAgICAgICAgICAic3J0IjogOC40OSwNCiAgICAgICAgICAic2FtdCI6IDE2MjUuNDkNCiAgICAgICAgfQ0KICAgICAgXQ0KICAgIH0NCiAgXSwNCiAgImNkbiI6IFsNCiAgICB7DQogICAgICAiY2dzdGluIjogIjIwR1JSSEYyNTYyRDNBMyIsDQogICAgICAidHlwIjogIkIyQiIsDQogICAgICAiY25hbWUiOiAiS2FtYXRoIEZvb2RzIFB2dC5MdGQuIiwNCiAgICAgICJjZG4iOiBbDQogICAgICAgIHsNCiAgICAgICAgICAibnR0eSI6ICJDUiIsDQogICAgICAgICAgIm50X251bSI6IDUzMzUxNSwNCiAgICAgICAgICAibnRfZHQiOiAiMjMtMDktMjAxNiIsDQogICAgICAgICAgInJzbiI6ICJOcGNuTEVDdnRyUEdsQnciLA0KICAgICAgICAgICJpbnVtIjogIjkxNTkxNCIsDQogICAgICAgICAgImlkdCI6ICIyMy0wOS0yMDE2IiwNCiAgICAgICAgICAidmFsIjogNTIyNS4yOCwNCiAgICAgICAgICAiaXJ0IjogNDguNywNCiAgICAgICAgICAiaWFtdCI6IDg0NTAzOC4yMiwNCiAgICAgICAgICAiY3J0IjogOTUuNzksDQogICAgICAgICAgImNhbXQiOiAzNzY2MS4yOSwNCiAgICAgICAgICAic3J0IjogNjguNDUsDQogICAgICAgICAgInNhbXQiOiA0MjM4MS4xMw0KICAgICAgICB9DQogICAgICBdDQogICAgfQ0KICBdLA0KICAidHhwZCI6IFsNCiAgICB7"
				+ "DQogICAgICAiaW51bSI6ICI1MzM1MTUiLA0KICAgICAgImRvY19udW0iOiAiNTMzNTE1IiwNCiAgICAgICJkb2NfZHQiOiAiMjMtMDktMjAxNiIsDQogICAgICAiaXJ0IjogNDguNywNCiAgICAgICJpYW10IjogODQ1MDM4LjIyLA0KICAgICAgImNydCI6IDk1Ljc5LA0KICAgICAgImNhbXQiOiAzNzY2MS4yOSwNCiAgICAgICJzcnQiOiA2OC40NSwNCiAgICAgICJzYW10IjogNDIzODEuMTMNCiAgICB9DQogIF0sDQogICJlY29tX2ludm9jaWVzIjogWw0KICAgIHsNCiAgICAgICJlY29tX3R5IjogIkludGVyIiwNCiAgICAgICJlSW52b2ljZXMiOiBbDQogICAgICAgIHsNCiAgICAgICAgICAidHhwcmQiOiAiMjAxNS0xNiIsDQogICAgICAgICAgIm1pZCI6ICJNMTMzMzIiLA0KICAgICAgICAgICJncnN2YWwiOiAxMDAwLA0KICAgICAgICAgICJjdGluIjogIjIwR1JSSEYyNTYyRDNBMyIsDQogICAgICAgICAgIml0bSI6IFsNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgInR5IjogIlMiLA0KICAgICAgICAgICAgICAiaHNuX3NjIjogIlM4MjIzIiwNCiAgICAgICAgICAgICAgInR4dmFsIjogNTIyNS4yOCwNCiAgICAgICAgICAgICAgInN1cF90eXBlIjogIkIyQiIsDQogICAgICAgICAgICAgICJpcnQiOiA0OC43LA0KICAgICAgICAgICAgICAiaWFtdCI6IDg0NTAzOC4yMiwNCiAgICAgICAgICAgICAgImNydCI6IDk1Ljc5LA0KICAgICAgICAgICAgICAiY2FtdCI6IDM3NjYxLjI5LA0KICAgICAgICAgICAgICAic3J0IjogNjguNDUsDQogICAgICAgICAgICAgICJzYW10IjogNDIzODEuMTMNCiAgICAgICAgICAgIH0NCiAgICAgICAgICBdDQogICAgICAgIH0NCiAgICAgIF0NCiAgICB9DQogIF0NCn0=");
		String newString = new String(decodedString);
		System.out.println(newString);
		
		
	}
}
